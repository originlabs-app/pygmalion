# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## üö® R√àGLES CRITIQUES - √Ä LIRE EN PREMIER

### 1. SSOT - Single Source of Truth (OBLIGATOIRE)
**TOUJOURS v√©rifier si le code existe d√©j√† avant de cr√©er quoi que ce soit**
- üìñ **CLAUDE.md EST le SSOT** - Ce fichier contient toutes les r√®gles et principes
- ‚úÖ Une seule source de v√©rit√© par fonctionnalit√©
- ‚ùå JAMAIS de duplication de code/config/sch√©mas

### 2. Avant CHAQUE ajout de code
```bash
# OBLIGATOIRE - Faire ces v√©rifications :

# 1. Est-ce que √ßa existe d√©j√† ?
grep -r "NomDeLaFonction" . --exclude-dir=node_modules
find . -name "*nom-fichier*" -type f | grep -v node_modules

# 2. O√π est la bonne place ? (R√àGLES MVP)
# - Composants ‚Üí apps/landing/app/components/
# - Services ‚Üí apps/landing/src/services/
# - Config ‚Üí apps/landing/src/config/
# - Hooks ‚Üí apps/landing/src/hooks/
# - Utils ‚Üí apps/landing/src/lib/
# - API routes ‚Üí apps/landing/app/api/
# - Database ‚Üí packages/database (Prisma uniquement)
# - Auth ‚Üí packages/auth (Supabase uniquement)

# 3. Y a-t-il d√©j√† un service similaire ?
ls apps/landing/src/services/
```

### 3. Architecture actuelle (NE PAS DUPLIQUER)
- **Prisma** : `@ember/database` uniquement (PAS de schema local)
- **Supabase** : Centralis√© dans `@ember/auth` 
- **APIs** : Tout dans Next.js `/app/api/` (PAS de serveur Express)
- **Composants** : `apps/landing/app/components/` (MVP)
- **Services** : `apps/landing/src/services/` (MVP)
- **Config** : `apps/landing/src/config/` (MVP)
- **Hooks** : `apps/landing/src/hooks/` (MVP)
- **Utils** : `apps/landing/src/lib/` (MVP)

### 4. Quality Gates (OBLIGATOIRE)
**Avant chaque commit, v√©rifier :**
- [ ] Code coverage minimum : 80% (quand tests configur√©s)
- [ ] Complexit√© cyclomatique max : 10 par fonction
- [ ] Nombre de param√®tres max : 4 par fonction
- [ ] Pas de duplication de code d√©tect√©e
- [ ] Gestion d'erreurs appropri√©e
- [ ] Documentation mise √† jour

### 5. V√©rification des d√©pendances
**Avant chaque ajout de package :**
- [ ] Impact sur le bundle size √©valu√©
- [ ] Raison de la d√©pendance document√©e
- [ ] Alternative existante v√©rifi√©e
- [ ] Version stable et maintenue
- [ ] Licence compatible avec le projet

## üî¥ CRITICAL REMINDERS - READ FIRST

### Workflow de d√©veloppement OBLIGATOIRE

**üö® R√àGLE ABSOLUE : TOUJOURS commencer par `/ssot`**

1. **CONSULTER CLAUDE.md** - `/ssot` OBLIGATOIRE avant toute action
2. **Les fichiers sprint dictent la progression** - Suivre le fichier sprint en cours √©tape par √©tape
3. **Progression t√¢che par t√¢che** - Une seule t√¢che √† la fois selon le sprint
4. **Checkmark APR√àS test valid√©** - Ne JAMAIS checkmarker sans validation utilisateur
5. **Sc√©nario de test OBLIGATOIRE** - Fournir un sc√©nario d√©taill√© avant checkmark
6. **Validation avant progression** - Si test √©choue, on reste sur la t√¢che
7. **Pour chaque nouvelle t√¢che** :
   a. Poser des questions sur l'impl√©mentation souhait√©e
   b. Proposer un userflow logique bas√© sur l'existant
   c. Pour le front : TOUJOURS r√©f√©rencer le design de la landing page
8. **Documentation apr√®s ach√®vement** - Ajouter contexte et d√©cisions dans le fichier sprint en cours

### Commandes et environnement
- **pnpm dev** : L'utilisateur g√®re dans des terminaux s√©par√©s (front + API)
- **Autres commandes** : Claude ex√©cute via Bash (db:push, db:generate, build, lint)
- **Si erreur** : L'utilisateur copie/colle les logs du terminal

### Slash Commands

#### üìã Commandes de workflow
- `/ssot` : **OBLIGATOIRE** - V√©rifie et applique les r√®gles SSOT de CLAUDE.md
- `/questions` : Pose 5-10+ questions sur la t√¢che actuelle avant d√©veloppement
- `/userflow` : Propose un userflow d√©taill√© pour la fonctionnalit√©
- `/test` : G√©n√®re un sc√©nario de test complet pour validation (curl ou de preference en run dev webview)
- `/clean` : Am√©liore le maintien du code, l'organisation des fichiers/dossiers et √©vite le code spaghetti
- `/pasta` Fais une analyse du SPAGHETTI CODE et autres probl√®mes
- `/debug` : D√©bogage en respectant les principes SSOT (/pasta & /clean) de CLAUDE.md
- `/design` : Utilise les r√©f√©rences design et les styles valid√©s de la landing page

#### üìù Impl√©mentation des commandes
Les commandes sont des raccourcis pour le workflow. Quand vous tapez une commande, Claude :
- **OBLIGATOIRE** : Lit CLAUDE.md en premier
- Lit les fichiers n√©cessaires (le fichier sprint en cours, CLAUDE.md, etc.)
- Analyse l'√©tat actuel
- Ex√©cute l'action demand√©e
- Affiche le r√©sultat format√©

**üö® R√àGLE ABSOLUE** : 
- **TOUJOURS** commencer par `/ssot` avant toute action
- **TOUJOURS** v√©rifier CLAUDE.md avant de coder
- **TOUJOURS** appliquer les quality gates
- **TOUJOURS** respecter l'architecture SSOT

**Note** : Ces commandes sont sp√©cifiques √† ce projet et respectent le workflow d√©fini ci-dessus.

### üåü INTENTIONS DU CTO - ALIGNEMENT STRAT√âGIQUE
**Objectif global** : D√©velopper comme un CTO de 45 ans d'exp√©rience ‚Äì prioriser la qualit√©, √©viter le "spaghetti code", et utiliser l'IA pour du "vibecoding" professionnel sans hallucinations ni d√©sorganisation.

**Intentions cl√©s** :
- **Qualit√© > V√©locit√©** : Toujours propre d√®s le d√©but, m√™me si √ßa prend plus de temps (ex. : quality gates obligatoires).
- **SSOT absolu** : CLAUDE.md est la r√©f√©rence unique ‚Äì tout √©cart doit √™tre justifi√© par une ADR.
- **Anti-spaghetti** : Z√©ro tol√©rance pour les duplications, mocks g√©ants, console.log, types any, ou imports relatifs.
- **Workflow IA** : L'IA doit poser des questions, proposer des userflows, et valider par tests avant progression.
- **MVP pragmatique** : Garder tout dans `apps/landing/` pour la vitesse, refactoriser post-lancement.

Ces intentions guident TOUTES les d√©cisions ‚Äì l'IA doit s'y r√©f√©rer via `/ssot` pour s'aligner.

### üìò EXEMPLES D'UTILISATION DE /ssot
**Exemple 1 : Avant une nouvelle feature**
- Utilisateur : "/ssot puis ajoute une page de login"
- R√©ponse IA attendue :
  1. Lecture de CLAUDE.md confirm√©e.
  2. V√©rification SSOT : "Le login existe d√©j√† dans @ember/auth ‚Äì pas de duplication."
  3. Proposition align√©e : "Voici le code, plac√© dans apps/landing/app/[locale]/login/page.tsx, avec imports absolus et types stricts."

**Exemple 2 : D√©tection de probl√®me**
- Si d√©viation d√©tect√©e : "üö® Alerte SSOT : Cette impl√©mentation utiliserait console.log ‚Äì interdit. Proposition corrig√©e : Utiliser logger.info()."

√áa rend /ssot plus concret et force l'alignement sur tes intentions.

## üìã MARCHE √Ä SUIVRE D√âTAILL√âE

### 1Ô∏è‚É£ Lecture du sprint
- Ouvrir le fichier sprint en cours
- Identifier la prochaine t√¢che non checkmark√©e de priorit√© haute
- Lire TOUS les crit√®res d'acceptation
- Comprendre le contexte et les d√©pendances

### 2Ô∏è‚É£ Phase de questions (OBLIGATOIRE)
Poser MINIMUM 5 questions avant de coder :
- "Comment veux-tu que [fonctionnalit√©] se comporte quand [cas d'usage] ?"
- "Quel design/style pr√©f√®res-tu pour [√©l√©ment UI] ?"
- "O√π doit se situer [fonctionnalit√©] dans le flow utilisateur ?"
- "Quelles sont les erreurs √† g√©rer pour [action] ?"
- "As-tu des pr√©f√©rences pour [choix technique] ?"

### 3Ô∏è‚É£ Proposition de userflow
Pr√©senter un flow d√©taill√© :
```
üì± Userflow propos√© :
1. L'utilisateur arrive sur [page]
2. Il voit [√©l√©ments visibles]
3. Il peut [actions possibles]
4. Si [action], alors [r√©sultat]
5. En cas d'erreur : [gestion]
```

### 4Ô∏è‚É£ D√©veloppement
- R√©f√©rencer TOUJOURS le design de la landing page
- Utiliser les composants/patterns existants
- Commiter r√©guli√®rement (si demand√©)
- Documenter les d√©cisions importantes

### 5Ô∏è‚É£ Sc√©nario de test
Format OBLIGATOIRE :
```
üìã Sc√©nario de test - [Nom fonctionnalit√©]

Pr√©requis :
- [ ] Serveur frontend lanc√© (port 3000)
- [ ] Serveur API lanc√© (port 8000)
- [ ] Utilisateur connect√© comme admin (si n√©cessaire)

Test :
1. Aller sur http://localhost:3000/[page]
2. V√©rifier que [√©l√©ment] est visible
3. Cliquer sur [bouton/lien]
4. Remplir [formulaire] avec :
   - Champ 1 : "valeur test"
   - Champ 2 : "valeur test"
5. Soumettre le formulaire
6. V√©rifier que :
   - [ ] Message de succ√®s appara√Æt
   - [ ] Redirection vers [page]
   - [ ] Donn√©es visibles dans [endroit]

Cas d'erreur √† tester :
- Formulaire vide
- Donn√©es invalides
- Serveur API √©teint
```

### 6Ô∏è‚É£ Validation et checkmark
- Attendre confirmation : "Test valid√© ‚úÖ" 
- Si √©chec : corriger et reproposer test
- Si succ√®s : checkmarker dans le fichier sprint en cours
- Ajouter section "‚úÖ Compl√©t√©" avec d√©tails

### 7Ô∏è‚É£ Documentation
Ajouter dans le fichier sprint en cours :
```markdown
### ‚úÖ Compl√©t√© : [Nom t√¢che]

**Actions effectu√©es :**
- ‚úÖ [Action 1 r√©alis√©e]
- ‚úÖ [Action 2 r√©alis√©e]

**D√©cisions prises :**
- [D√©cision technique] : [Raison]
- [Choix UX] : [Justification]

**Notes :**
- [Contexte important]
- [Points d'attention pour le futur]
```

## üèóÔ∏è ARCHITECTURE DECISION RECORDS (ADR)

### Format ADR
Chaque d√©cision technique majeure doit √™tre document√©e dans `/docs/architecture/adr/` :

```markdown
# ADR-XXX: [Titre de la d√©cision]

**Date :** YYYY-MM-DD
**Statut :** [Propos√© | Accept√© | Rejet√© | D√©pr√©ci√©]

**Contexte :**
[Pourquoi cette d√©cision est n√©cessaire]

**D√©cision :**
[Nous avons d√©cid√© de...]

**Cons√©quences :**
- [Cons√©quence positive]
- [Cons√©quence n√©gative]
- [Impact sur l'architecture]

**Alternatives consid√©r√©es :**
- [Alternative 1] : [Pourquoi rejet√©e]
- [Alternative 2] : [Pourquoi rejet√©e]
```

### ADR existantes √† cr√©er :
- ADR-001: Utilisation de Prisma vs TypeORM
- ADR-002: Architecture monorepo avec Turborepo
- ADR-003: Next.js App Router vs Pages Router
- ADR-004: Clerk vs Auth0 pour l'authentification

## üîç CODE REVIEW CHECKLIST (IA)

**Avant chaque modification, v√©rifier :**

### Architecture
- [ ] Respect du SSOT (pas de duplication)
- [ ] Code plac√© dans le bon package
- [ ] D√©pendances appropri√©es
- [ ] Pas de couplage fort entre modules

### Qualit√© du code
- [ ] Nommage clair et coh√©rent
- [ ] Fonctions courtes et focalis√©es
- [ ] Gestion d'erreurs appropri√©e
- [ ] Pas de code mort ou comment√©

### Tests et documentation
- [ ] Tests inclus (quand framework configur√©)
- [ ] Documentation mise √† jour
- [ ] Exemples d'utilisation fournis
- [ ] API publique document√©e

### Performance
- [ ] Pas de requ√™tes N+1
- [ ] Bundle size optimis√©
- [ ] Lazy loading appropri√©
- [ ] Cache utilis√© quand pertinent

### S√©curit√©
- [ ] Validation des inputs
- [ ] Pas de secrets en dur
- [ ] Permissions appropri√©es
- [ ] Sanitisation des donn√©es

## üìä M√âTRIQUES DE QUALIT√â

### Objectifs √† maintenir
- **Code coverage** : 80% minimum (quand tests configur√©s)
- **Complexit√© cyclomatique** : Max 10 par fonction
- **Nombre de param√®tres** : Max 4 par fonction
- **Longueur de fonction** : Max 50 lignes
- **Duplication de code** : 0% (utilisation de composants partag√©s)

### Outils de v√©rification
```bash
# V√©rification de la qualit√©
pnpm lint                    # ESLint + Prettier
pnpm type-check             # TypeScript
pnpm test                   # Tests unitaires
pnpm build                  # Build verification
```

## üö® PRINCIPES DE D√âVELOPPEMENT - √âVITER LE SPAGHETTI CODE

### üéØ PHILOSOPHIE : "QUALIT√â D√àS LE D√âBUT"

**PRINCIPE FONDAMENTAL :** Mieux vaut prendre 1h de plus pour faire propre que 1 jour pour nettoyer apr√®s.

### üìã R√àGLES ABSOLUES - JAMAIS D'EXCEPTION

#### **1. JAMais de logging non structur√©**
```typescript
// ‚ùå INTERDIT - Ne jamais faire
console.log('Debug endpoint appel√©');
console.error('Erreur API contact:', error);

// ‚úÖ OBLIGATOIRE - Toujours faire
logger.info('Debug endpoint appel√©');
logger.error('Erreur API contact:', error);
```

#### **2. JAMais de types non stricts**
```typescript
// ‚ùå INTERDIT - Ne jamais faire
const data: any = response;
} catch (err: any) {

// ‚úÖ OBLIGATOIRE - Toujours faire
interface ApiResponse {
  data: User[];
  status: number;
}
const data: ApiResponse = response;
} catch (err: Error) {
```

#### **3. JAMais d'imports fragiles**
```typescript
// ‚ùå INTERDIT - Ne jamais faire
import { useCurrentLocale } from '../hooks/useCurrentLocale';
import BusinessPlanModal from '../BusinessPlanModal';

// ‚úÖ OBLIGATOIRE - Toujours faire
import { useCurrentLocale } from '@/hooks/useCurrentLocale';
import BusinessPlanModal from '@/components/BusinessPlanModal';
```

#### **4. JAMais de donn√©es hardcod√©es massives**
```typescript
// ‚ùå INTERDIT - Ne jamais faire
const mockData = { /* 1000+ lignes de contenu hardcod√© */ };

// ‚úÖ OBLIGATOIRE - Toujours faire
const loadData = async () => {
  return await readFromFile();
};
```

### üîß QUALITY GATES OBLIGATOIRES

#### **Avant chaque commit, v√©rifier :**
```bash
# Checklist automatique pour TypeScript/Node.js
- [ ] Types stricts (pas de any/unknown)
- [ ] Logger professionnel (pas de console.log)
- [ ] Imports absolus (pas de ../)
- [ ] Pas de duplication de code
- [ ] Pas de donn√©es hardcod√©es massives
- [ ] Tests passent (Jest/Vitest)
- [ ] Lint clean (ESLint)
- [ ] Type check clean (TypeScript)
- [ ] Build clean (Next.js/NestJS)
```

#### **Scripts de v√©rification sp√©cialis√©s**
```bash
# quality-check.sh
#!/bin/bash
echo "üîç V√©rification qualit√© TypeScript/Node.js..."

# Compter les types non stricts
any_count=$(grep -r "any\|unknown" src/ | wc -l)
echo "Types non stricts: $any_count"

# Compter les logs non structur√©s
console_count=$(grep -r "console\." src/ | wc -l)
echo "Logs non structur√©s: $console_count"

# Compter les imports fragiles
relative_count=$(grep -r "from '\.\./" src/ | wc -l)
echo "Imports fragiles: $relative_count"

# Alert si > 0
if [ $any_count -gt 0 ] || [ $console_count -gt 0 ] || [ $relative_count -gt 0 ]; then
  echo " PROBL√àMES D√âTECT√âS - NETTOYAGE REQUIS"
  exit 1
fi
```

### üèóÔ∏è ARCHITECTURE DECISION RECORDS (ADR)

#### **Documenter chaque d√©cision technique**
```markdown
# ADR-XXX: [Titre de la d√©cision]

**Date :** YYYY-MM-DD
**Statut :** [Propos√© | Accept√© | Rejet√© | D√©pr√©ci√©]

**Contexte :**
[Pourquoi cette d√©cision est n√©cessaire]

**D√©cision :**
[Nous avons d√©cid√© de...]

**Cons√©quences :**
- [Cons√©quence positive]
- [Cons√©quence n√©gative]
- [Impact sur l'architecture]

**Alternatives consid√©r√©es :**
- [Alternative 1] : [Pourquoi rejet√©e]
- [Alternative 2] : [Pourquoi rejet√©e]
```

### üìä M√âTRIQUES DE QUALIT√â SP√âCIALIS√âES

#### **Objectifs √† maintenir**
```typescript
// quality-metrics.ts
export const qualityMetrics = {
  nonStrictTypes: 0,    // Objectif : 0
  unstructuredLogs: 0,   // Objectif : 0
  fragileImports: 0,     // Objectif : 0
  codeDuplication: 0,    // Objectif : 0
  testCoverage: 80,      // Objectif : 80%+
  bundleSize: 500,       // Objectif : < 500KB (Next.js)
  cyclomaticComplexity: 10, // Objectif : < 10
  functionLength: 50,    // Objectif : < 50 lignes
};
```

###Ô∏è OUTILS DE D√âVELOPPEMENT SP√âCIALIS√âS

#### **ESLint Rules Strictes**
```json
{
  "rules": {
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unsafe-assignment": "error",
    "no-console": "error",
    "import/no-relative-parent-imports": "error",
    "no-duplicate-imports": "error",
    "complexity": ["error", 10],
    "max-lines-per-function": ["error", 50]
  }
}
```

#### **TypeScript Strict**
```json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "noUncheckedIndexedAccess": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  }
}
```

#### **Next.js Config**
```javascript
// next.config.js
module.exports = {
  experimental: {
    strictMode: true,
  },
  eslint: {
    ignoreDuringBuilds: false,
  },
  typescript: {
    ignoreBuildErrors: false,
  },
}
```

#### **NestJS Config**
```typescript
// nest-cli.json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true
  }
}
```

### üîÑ WORKFLOW DE D√âVELOPPEMENT SP√âCIALIS√â

#### **√âtape 1 : Planification**
```bash
# Avant de coder
1. D√©finir l'architecture (Next.js/NestJS)
2. Cr√©er les types stricts (TypeScript)
3. Planifier les composants/services
4. Identifier les d√©pendances (Node.js)
5. Choisir le logger appropri√©
```

#### **√âtape 2 : D√©veloppement**
```bash
# Pendant le d√©veloppement
1. Types stricts d'abord (TypeScript)
2. Logger professionnel (Winston/Pino)
3. Tests en parall√®le (Jest/Vitest)
4. Code review continue
5. Documentation en temps r√©el
```

#### **√âtape 3 : Validation**
```bash
# Avant commit
1. Quality gates
2. Tests passent (Jest/Vitest)
3. Lint clean (ESLint)
4. Type check (TypeScript)
5. Build clean (Next.js/NestJS)
```

### üö® R√àGLES ABSOLUES POUR L'IA

#### **R√®gle 1 : "Clean Code First"**
```typescript
// Priorit√© : Qualit√© > V√©locit√©
// Mieux vaut prendre 1h de plus pour faire propre
// Que 1 jour pour nettoyer apr√®s
```

#### **R√®gle 2 : "No Technical Debt"**
```typescript
// Interdit de laisser des TODO
// Interdit de commenter "// TODO: nettoyer plus tard"
// Interdit de faire "quick & dirty"
```

#### **R√®gle 3 : "Architecture Over Speed"**
```typescript
// Mieux vaut une architecture propre
// Qu'un code qui marche vite mais sale
```

### MONITORING CONTINU

#### **Code Review Checklist**
```markdown
## Code Review - Checklist TypeScript/Node.js

### Architecture
- [ ] Types stricts utilis√©s (TypeScript)
- [ ] Pas de duplication
- [ ] Imports absolus (@/)
- [ ] Logger professionnel (Winston/Pino)

### Performance
- [ ] Pas de donn√©es hardcod√©es massives
- [ ] Bundle size acceptable (Next.js)
- [ ] Lazy loading appropri√©
- [ ] API optimis√©e (NestJS)

### Tests
- [ ] Tests unitaires (Jest/Vitest)
- [ ] Tests d'int√©gration
- [ ] Coverage > 80%

### Documentation
- [ ] README mis √† jour
- [ ] Types document√©s
- [ ] API document√©e (Swagger)
```

### üéØ LE√áONS APPRISES

#### **Erreurs sp√©cifiques √† √©viter :**
1. ‚ùå **Mock g√©ant** : 1600 lignes de contenu hardcod√©
2. ‚ùå **Console.log** : 50+ occurrences pollu√©es
3. ‚ùå **Types any** : 30+ occurrences non s√©curis√©es
4. ‚ùå **Imports relatifs** : ../ qui se cassent facilement
5. ‚ùå **Structure imbriqu√©e** : Builds Next.js cass√©s

#### **Solutions sp√©cialis√©es :**
1. ‚úÖ **Logger professionnel** : Winston/Pino d√®s le premier log
2. ‚úÖ **Types stricts** : Jamais de any/unknown
3. ‚úÖ **Imports absolus** : Toujours @/
4. ‚úÖ **Architecture propre** : Structure Next.js/NestJS claire
5. ‚úÖ **Quality gates** : ESLint + TypeScript + Jest

### IMPL√âMENTATION IMM√âDIATE

#### **Actions concr√®tes pour chaque nouveau projet :**
1. ‚úÖ **Installer ESLint strict** : Bloquer any et console.log
2. ‚úÖ **Configurer Husky** : Pre-commit hooks
3. ‚úÖ **Cr√©er quality-metrics** : Monitoring continu
4. ‚úÖ **Documenter les r√®gles** : ADR pour chaque d√©cision
5. ‚úÖ **Configurer logger** : Winston/Pino d√®s le d√©but

### üí° CONCLUSION

**La cl√© : QUALIT√â D√àS LE D√âBUT**

**Au lieu de :**
```typescript
// "On nettoiera plus tard"
console.log('Debug');
const data: any = response;
```

**Faire :**
```typescript
// "Propre d√®s le d√©but"
logger.info('Debug');
interface ApiResponse { data: User[]; }
const data: ApiResponse = response;
```

**R√©sultat :** **Plus jamais de spaghetti code !** üöÄ

**Cette approche co√ªte 10% de temps en plus au d√©but, mais √©conomise 90% de temps de nettoyage !** üí™

## Project Overview

Ember is a strategic AI copilot for entrepreneurs, built as a monorepo using pnpm workspaces and Turborepo. The platform helps entrepreneurs make better decisions faster with AI-powered business planning, partner matching, and strategic recommendations.

## Key Commands

### Development
```bash
# Quick start - runs the landing page
./start.sh

# Run specific apps
pnpm dev --filter @ember/landing    # Landing page (port 3000)
pnpm dev --filter @ember/app        # SaaS app (port 3001)
pnpm dev --filter @ember/api        # Backend API (port 8000)

# Run all services
pnpm dev
```

### Build & Production
```bash
pnpm build              # Build all packages
pnpm start              # Start production servers
pnpm lint               # Run linting across all packages
pnpm type-check         # TypeScript type checking
```

### Database Operations (Prisma)
```bash
pnpm db:generate        # Generate Prisma client
pnpm db:push           # Push schema to database
pnpm db:migrate        # Run database migrations
pnpm db:studio         # Open Prisma Studio GUI
```

## Architecture Overview

This is a monorepo with three main application types:

1. **Frontend Apps** (`apps/`): Next.js applications
   - `landing`: Marketing landing page with waitlist (port 3000)
   - `app`: Main SaaS application (port 3001)
   - `admin`: Admin dashboard (port 3002)

2. **Shared Packages** (`packages/`): Reusable code across apps
   - `ui`: Design system components
   - `database`: Prisma schema and client
   - `auth`: Clerk authentication integration
   - `ai`: LLM router for GPT-4o, Claude, and Mistral
   - `shared`: TypeScript types and utilities

3. **Backend Services** (`services/`):
   - `api`: Express.js REST API (port 8000)

### ‚ö†Ô∏è IMPORTANT: Structure temporaire actuelle

**D√©cision pragmatique (Ao√ªt 2025)** : Pour acc√©l√©rer le d√©veloppement du MVP, tout le code est actuellement dans `apps/landing/` incluant :
- Pages publiques (/, /contact, /our-story)
- Pages admin (/admin/*)
- API routes (/api/*)
- Onboarding (/welcome, /thank-you)

**Raison** : √âviter la complexit√© de g√©rer 3 apps s√©par√©es pendant la phase MVP.

**Plan futur** : Apr√®s le lancement du MVP (Septembre 2025), refactoriser en 3 apps distinctes :
1. `apps/landing/` ‚Üí Seulement marketing + waitlist
2. `apps/app/` ‚Üí Application SaaS + onboarding
3. `apps/admin/` ‚Üí Dashboard admin s√©par√©

**Impact actuel** : 
- Tout fonctionne sur le port 3000
- Les dossiers `apps/app/` et `apps/admin/` sont vides (seulement package.json)
- Pas d'impact sur les fonctionnalit√©s, juste sur l'organisation du code

### üéØ R√àGLES DE D√âVELOPPEMENT MVP (Ao√ªt-Octobre 2025)

**PRINCIPE KISS : Keep It Simple, Stupid**

#### **R√àGLE UNIQUE POUR TOUT NOUVEAU D√âVELOPPEMENT**
```
TOUT dans apps/landing/
- ‚úÖ Composants ‚Üí apps/landing/app/components/
- ‚úÖ Services ‚Üí apps/landing/src/services/
- ‚úÖ Config ‚Üí apps/landing/src/config/
- ‚úÖ Hooks ‚Üí apps/landing/src/hooks/
- ‚úÖ Utils ‚Üí apps/landing/src/lib/
```

#### **POURQUOI CETTE APPROCHE ?**
1. **Clart√© mentale** : Une seule r√®gle = z√©ro friction
2. **V√©locit√© max** : Pas de temps perdu √† r√©fl√©chir "o√π mettre ce code ?"
3. **Refactoring plus facile** : Tout est au m√™me endroit
4. **Contre la complexit√©** : D√©veloppeur seul, MVP priorit√©

#### **EXCEPTIONS (packages existants uniquement)**
- **Database** : `@ember/database` (Prisma)
- **Auth** : `@ember/auth` (Supabase)
- **UI** : `@ember/ui` (composants d√©j√† cr√©√©s)

#### **REFACTORING POST-MVP (Octobre 2025)**
- ‚úÖ Migration organis√©e vers packages/
- ‚úÖ Architecture propre d'un coup
- ‚úÖ Temps d√©di√© au refactoring
- ‚úÖ Utilisateurs valid√©s avant optimisation

## Key Technical Decisions

- **Monorepo Tool**: Turborepo for build orchestration with pnpm workspaces
- **Frontend**: Next.js 14 with App Router, React 18, TypeScript
- **Styling**: Tailwind CSS with custom Ember design tokens
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: Clerk for user management
- **AI Models**: Multi-model approach using OpenAI (GPT-4o), Anthropic (Claude), and Mistral
- **Payments**: Stripe integration
- **Email**: Resend for transactional emails

## Important Notes

- No test framework is currently configured - ask user for testing approach before writing tests
- The project uses workspace protocol (`workspace:*`) for internal package dependencies
- Brand colors: `ember-600: #3876f7` (blue), `coral-600: #ed4f15` (orange accent)
- Early Believer program offers Founder tier at 49‚Ç¨/month (lifetime) for first 500 users
- Documentation is centralized in the `docs/` directory

