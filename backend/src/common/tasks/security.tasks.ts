import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { PrismaService } from '@/prisma/prisma.service';

@Injectable()
export class SecurityTasksService {
  private readonly logger = new Logger(SecurityTasksService.name);

  constructor(private prisma: PrismaService) {}

  /**
   * Purge quotidienne des secrets MFA temporaires expir√©s
   * Ex√©cut√©e tous les jours √† 2h du matin
   */
  @Cron(CronExpression.EVERY_DAY_AT_2AM)
  async purgeExpiredMfaTempSecrets() {
    this.logger.log('üßπ D√©but de la purge des secrets MFA temporaires expir√©s');

    try {
      const now = new Date();

      // Compter les secrets expir√©s avant suppression
      const expiredCount = await this.prisma.userProfile.count({
        where: {
          mfa_temp_secret_expires: {
            lt: now,
          },
        },
      });

      if (expiredCount === 0) {
        this.logger.log('‚úÖ Aucun secret MFA temporaire expir√© √† purger');
        return;
      }

      // Supprimer les secrets expir√©s
      const result = await this.prisma.userProfile.updateMany({
        where: {
          mfa_temp_secret_expires: {
            lt: now,
          },
        },
        data: {
          mfa_temp_secret: null,
          mfa_temp_secret_expires: null,
        },
      });

      this.logger.log(
        `‚úÖ Purge termin√©e: ${result.count} secrets MFA temporaires supprim√©s`,
      );

      // Log audit
      await this.logSecurityEvent('MFA_TEMP_SECRETS_PURGED', {
        count: result.count,
        timestamp: now.toISOString(),
      });
    } catch (error) {
      this.logger.error(
        '‚ùå Erreur lors de la purge des secrets MFA temporaires:',
        error,
      );

      // Log de l'erreur
      await this.logSecurityEvent('MFA_TEMP_SECRETS_PURGE_ERROR', {
        error: error.message,
        timestamp: new Date().toISOString(),
      });
    }
  }

  /**
   * Nettoyage des refresh tokens expir√©s et r√©voqu√©s
   * Ex√©cut√©e toutes les 6 heures
   */
  @Cron(CronExpression.EVERY_6_HOURS)
  async cleanupExpiredRefreshTokens() {
    this.logger.log('üßπ D√©but du nettoyage des refresh tokens expir√©s');

    try {
      const now = new Date();
      const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

      // Supprimer les tokens expir√©s depuis plus de 7 jours
      const expiredResult = await this.prisma.refreshToken.deleteMany({
        where: {
          expires_at: {
            lt: sevenDaysAgo,
          },
        },
      });

      // Supprimer les tokens r√©voqu√©s depuis plus de 7 jours
      const revokedResult = await this.prisma.refreshToken.deleteMany({
        where: {
          is_active: false,
          revoked_at: {
            lt: sevenDaysAgo,
          },
        },
      });

      const totalDeleted = expiredResult.count + revokedResult.count;

      this.logger.log(
        `‚úÖ Nettoyage termin√©: ${totalDeleted} refresh tokens supprim√©s (${expiredResult.count} expir√©s, ${revokedResult.count} r√©voqu√©s)`,
      );

      await this.logSecurityEvent('REFRESH_TOKENS_CLEANUP_COMPLETED', {
        expired_count: expiredResult.count,
        revoked_count: revokedResult.count,
        total_deleted: totalDeleted,
        timestamp: now.toISOString(),
      });
    } catch (error) {
      this.logger.error(
        '‚ùå Erreur lors du nettoyage des refresh tokens:',
        error,
      );

      await this.logSecurityEvent('REFRESH_TOKENS_CLEANUP_ERROR', {
        error: error.message,
        timestamp: new Date().toISOString(),
      });
    }
  }

  /**
   * Audit quotidien des tentatives de connexion suspectes
   * Ex√©cut√©e tous les jours √† 1h du matin
   */
  @Cron(CronExpression.EVERY_DAY_AT_1AM)
  async auditSuspiciousLoginAttempts() {
    this.logger.log(
      "üîç D√©but de l'audit des tentatives de connexion suspectes",
    );

    try {
      const now = new Date();
      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);

      // Ici, nous pourrions analyser les logs de connexion pour d√©tecter des patterns suspects
      // Pour l'instant, nous nous contentons de log audit

      this.logger.log('‚úÖ Audit des tentatives de connexion termin√©');

      await this.logSecurityEvent('LOGIN_AUDIT_COMPLETED', {
        timestamp: now.toISOString(),
        period: `${yesterday.toISOString()} - ${now.toISOString()}`,
      });
    } catch (error) {
      this.logger.error("‚ùå Erreur lors de l'audit des connexions:", error);

      await this.logSecurityEvent('LOGIN_AUDIT_ERROR', {
        error: error.message,
        timestamp: new Date().toISOString(),
      });
    }
  }

  /**
   * Nettoyage hebdomadaire des anciens logs de s√©curit√©
   * Ex√©cut√©e tous les dimanches √† 3h du matin
   */
  @Cron('0 3 * * 0') // Chaque dimanche √† 3h
  async cleanupOldSecurityLogs() {
    this.logger.log('üßπ D√©but du nettoyage des anciens logs de s√©curit√©');

    try {
      const now = new Date();
      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

      // Supprimer les logs de s√©curit√© de plus de 30 jours
      // Ici nous pourrions avoir une table security_logs

      this.logger.log('‚úÖ Nettoyage des anciens logs de s√©curit√© termin√©');

      await this.logSecurityEvent('SECURITY_LOGS_CLEANUP_COMPLETED', {
        timestamp: now.toISOString(),
        cutoff_date: thirtyDaysAgo.toISOString(),
      });
    } catch (error) {
      this.logger.error(
        '‚ùå Erreur lors du nettoyage des logs de s√©curit√©:',
        error,
      );
    }
  }

  /**
   * Contr√¥le des tentatives MFA √©chou√©es - Rate limiting
   * Ex√©cut√©e toutes les heures
   */
  @Cron(CronExpression.EVERY_HOUR)
  async checkMfaFailureRates() {
    this.logger.log("üîí Contr√¥le des taux d'√©chec MFA");

    try {
      const now = new Date();
      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);

      // Ici nous pourrions analyser les √©checs MFA et bloquer temporairement les comptes
      // avec trop de tentatives √©chou√©es

      this.logger.log("‚úÖ Contr√¥le des taux d'√©chec MFA termin√©");

      await this.logSecurityEvent('MFA_FAILURE_RATE_CHECK_COMPLETED', {
        timestamp: now.toISOString(),
      });
    } catch (error) {
      this.logger.error(
        "‚ùå Erreur lors du contr√¥le des taux d'√©chec MFA:",
        error,
      );
    }
  }

  /**
   * M√©thode priv√©e pour logger les √©v√©nements de s√©curit√©
   */
  private async logSecurityEvent(
    eventType: string,
    data: Record<string, unknown>,
  ) {
    try {
      // Ici nous pourrions ins√©rer dans une table security_logs
      // Pour l'instant, nous utilisons simplement le logger
      this.logger.log(`üîê √âv√©nement s√©curit√©: ${eventType}`, data);

      // Si nous avions une table security_logs:
      // await this.prisma.securityLog.create({
      //   data: {
      //     event_type: eventType,
      //     event_data: JSON.stringify(data),
      //     created_at: new Date()
      //   }
      // });
    } catch (error) {
      this.logger.error(
        "‚ùå Erreur lors de l'enregistrement de l'√©v√©nement s√©curit√©:",
        error,
      );
    }
  }

  /**
   * M√©thode manuelle pour d√©clencher la purge des secrets MFA expir√©s
   * Utile pour les tests ou maintenance
   */
  async manualPurgeMfaTempSecrets(): Promise<{ count: number }> {
    this.logger.log('üîß Purge manuelle des secrets MFA temporaires expir√©s');

    const now = new Date();
    const result = await this.prisma.userProfile.updateMany({
      where: {
        mfa_temp_secret_expires: {
          lt: now,
        },
      },
      data: {
        mfa_temp_secret: null,
        mfa_temp_secret_expires: null,
      },
    });

    this.logger.log(
      `‚úÖ Purge manuelle termin√©e: ${result.count} √©l√©ments supprim√©s`,
    );

    return { count: result.count };
  }
}
