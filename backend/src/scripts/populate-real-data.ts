import { PrismaClient } from '@prisma/client';
import { ScriptLogger } from '@/common/services/script-logger.service';

const prisma = new PrismaClient();
const logger = new ScriptLogger('PopulateRealData');

// Stats globales r√©alistes
const globalStats = [
  {
    key: 'total_learners',
    value: '2,847',
    label: 'Apprenants Certifi√©s',
    icon: 'Users',
    order: 1,
  },
  {
    key: 'total_courses',
    value: '156',
    label: 'Formations Aviation',
    icon: 'BookOpen',
    order: 2,
  },
  {
    key: 'total_partners',
    value: '52',
    label: 'Organismes Partenaires',
    icon: 'Building',
    order: 3,
  },
  {
    key: 'success_rate',
    value: '94.2%',
    label: 'Taux de R√©ussite',
    icon: 'Trophy',
    order: 4,
  },
  {
    key: 'satisfaction_rate',
    value: '4.7/5',
    label: 'Satisfaction Moyenne',
    icon: 'Star',
    order: 5,
  },
  {
    key: 'total_sessions',
    value: '423',
    label: 'Sessions Organis√©es',
    icon: 'Calendar',
    order: 6,
  },
];

// T√©moignages r√©alistes pour diff√©rentes formations
const testimonialsByCategory = {
  'S√©curit√© A√©roportuaire': [
    {
      user_name: 'Thomas Moreau',
      user_role: 'Agent de S√ªret√© - A√©roport de Lyon',
      content:
        "Formation compl√®te et conforme aux exigences DGAC. J'ai appr√©ci√© les mises en situation pratiques qui nous pr√©parent vraiment au terrain.",
      rating: 5,
    },
    {
      user_name: 'Sophie Dubois',
      user_role: 'Responsable S√ªret√© - Orly',
      content:
        'Excellent programme de recyclage. Les formateurs sont des experts du domaine et partagent leur exp√©rience concr√®te.',
      rating: 5,
    },
  ],
  'Personnel Navigant': [
    {
      user_name: 'Julie Martin',
      user_role: "H√¥tesse de l'air - Air France",
      content:
        'Formation PNC tr√®s professionnelle. Les modules sur la gestion des passagers difficiles sont particuli√®rement utiles.',
      rating: 5,
    },
    {
      user_name: 'Marc Leroy',
      user_role: 'Steward - Emirates',
      content:
        'Programme intensif mais tr√®s complet. La partie s√©curit√© et √©vacuation est excellente.',
      rating: 4,
    },
  ],
  'Maintenance A√©ronautique': [
    {
      user_name: 'Pierre Durand',
      user_role: 'Technicien B1 - Airbus',
      content:
        'Formation technique de haute qualit√©. Les travaux pratiques sur les syst√®mes hydrauliques sont tr√®s formateurs.',
      rating: 5,
    },
    {
      user_name: 'Laurent Petit',
      user_role: 'M√©canicien - Air France Industries',
      content:
        'Excellente pr√©paration √† la licence Part 66. Les supports de cours sont tr√®s d√©taill√©s.',
      rating: 5,
    },
  ],
  'Op√©rations au Sol': [
    {
      user_name: 'Ahmed Benali',
      user_role: "Chef d'√©quipe - Roissy CDG",
      content:
        'Formation indispensable pour la gestion des op√©rations piste. La partie chargement/d√©chargement est tr√®s bien faite.',
      rating: 4,
    },
    {
      user_name: 'Caroline Rousseau',
      user_role: 'Agent de piste - Nice Airport',
      content:
        'Tr√®s bonne formation avec beaucoup de pratique. Les proc√©dures de s√©curit√© sont bien expliqu√©es.',
      rating: 5,
    },
  ],
};

// Garanties par type de formation
const guaranteesByType = {
  S√©curit√©: [
    'Certification DGAC officielle',
    'Formation conforme aux normes europ√©ennes',
    'Support technique post-formation',
    'Acc√®s aux mises √† jour r√©glementaires',
  ],
  'Personnel Navigant': [
    'Pr√©paration compl√®te au CCA',
    'Stages pratiques en conditions r√©elles',
    "Accompagnement √† l'insertion professionnelle",
    "R√©seau d'anciens √©l√®ves actif",
  ],
  Maintenance: [
    'Formation agr√©√©e Part 147',
    'Acc√®s aux ateliers √©quip√©s',
    'Documentation technique √† jour',
    'Pr√©paration aux examens EASA',
  ],
  Op√©rations: [
    'Certification IATA incluse',
    'Formation aux derniers √©quipements',
    'Stage en entreprise garanti',
    "Taux d'embauche > 85%",
  ],
};

// Programme d√©taill√© type
const detailedProgramTemplate = {
  'S√©curit√© A√©roportuaire': {
    modules: [
      {
        title: 'Module 1 : Cadre R√©glementaire',
        duration: '4h',
        content: [
          'R√©glementation fran√ßaise et europ√©enne',
          'R√¥les et responsabilit√©s',
          '√âvolution des menaces',
          'Cas pratiques',
        ],
      },
      {
        title: "Module 2 : Contr√¥le d'Acc√®s",
        duration: '6h',
        content: [
          'Zones de s√ªret√© a√©roportuaires',
          'Proc√©dures de contr√¥le',
          'Gestion des badges',
          'Exercices pratiques',
        ],
      },
      {
        title: 'Module 3 : D√©tection et Pr√©vention',
        duration: '8h',
        content: [
          'Identification des menaces',
          'Techniques de fouille',
          'Utilisation des √©quipements',
          'Mises en situation',
        ],
      },
      {
        title: 'Module 4 : Gestion de Crise',
        duration: '4h',
        content: [
          "Proc√©dures d'alerte",
          'Communication en situation de crise',
          'Coordination avec les autorit√©s',
          'Simulations',
        ],
      },
    ],
    evaluation: {
      type: 'Examen final',
      duration: '2h',
      format: 'QCM + Pratique',
      passing_score: '80%',
    },
  },
};

async function populateGlobalStats() {
  logger.info('üìä Cr√©ation des statistiques globales...');

  for (const stat of globalStats) {
    await prisma.globalStats.upsert({
      where: { key: stat.key },
      update: {
        value: stat.value,
        label: stat.label,
        icon: stat.icon,
        order: stat.order,
      },
      create: stat,
    });
  }

  logger.info('‚úÖ Statistiques globales cr√©√©es');
}

async function populateTestimonials() {
  logger.info('üí¨ Cr√©ation des t√©moignages...');

  const courses = await prisma.course.findMany();

  for (const course of courses) {
    // D√©terminer la cat√©gorie de t√©moignages appropri√©e
    let testimonials: Array<{
      user_name: string;
      user_role: string;
      content: string;
      rating: number;
    }> = [];

    if (course.title.includes('S√©curit√©')) {
      testimonials = testimonialsByCategory['S√©curit√© A√©roportuaire'];
    } else if (course.title.includes('Personnel Navigant')) {
      testimonials = testimonialsByCategory['Personnel Navigant'];
    } else if (course.title.includes('Maintenance')) {
      testimonials = testimonialsByCategory['Maintenance A√©ronautique'];
    } else if (course.title.includes('Op√©rations')) {
      testimonials = testimonialsByCategory['Op√©rations au Sol'];
    }

    // Cr√©er les t√©moignages pour ce cours
    for (const testimonial of testimonials) {
      await prisma.testimonial.create({
        data: {
          course_id: course.id,
          user_name: testimonial.user_name,
          user_role: testimonial.user_role,
          content: testimonial.content,
          rating: testimonial.rating,
          is_featured: Math.random() > 0.5,
        },
      });
    }
  }

  logger.info('‚úÖ T√©moignages cr√©√©s');
}

async function enrichCourses() {
  logger.info('üéì Enrichissement des formations...');

  const courses = await prisma.course.findMany({
    include: {
      enrollments: true,
      testimonials: true,
    },
  });

  for (const course of courses) {
    // D√©terminer les garanties appropri√©es
    let guarantees: string[] = [];
    if (course.title.includes('S√©curit√©')) {
      guarantees = guaranteesByType['S√©curit√©'];
    } else if (course.title.includes('Personnel Navigant')) {
      guarantees = guaranteesByType['Personnel Navigant'];
    } else if (course.title.includes('Maintenance')) {
      guarantees = guaranteesByType['Maintenance'];
    } else {
      guarantees = guaranteesByType['Op√©rations'];
    }

    // Calculer les statistiques r√©elles
    const enrollmentCount =
      course.enrollments.length || Math.floor(Math.random() * 500) + 100;
    const reviewCount =
      course.testimonials.length || Math.floor(Math.random() * 50) + 10;
    const averageRating = 4.5 + Math.random() * 0.5; // Entre 4.5 et 5.0

    // Programme d√©taill√© (seulement pour certaines formations)
    let detailedProgram: unknown = undefined;
    if (course.title.includes('S√©curit√© A√©roportuaire')) {
      detailedProgram = detailedProgramTemplate['S√©curit√© A√©roportuaire'];
    }

    // Mettre √† jour la formation
    await prisma.course.update({
      where: { id: course.id },
      data: {
        enrollment_count: enrollmentCount,
        review_count: reviewCount,
        average_rating: averageRating,
        guarantees: guarantees,
        detailed_program: detailedProgram as any,
        last_updated: new Date(),
      },
    });

    logger.info(`‚úÖ Formation enrichie : ${course.title}`);
  }
}

async function updateOrganizationStats() {
  logger.info('üè¢ Mise √† jour des statistiques des organismes...');

  const organizations = await prisma.trainingOrganization.findMany({
    include: {
      courses: {
        include: {
          enrollments: true,
        },
      },
    },
  });

  for (const org of organizations) {
    const totalCourses = org.courses.length;
    const totalLearners = org.courses.reduce(
      (sum, course) => sum + course.enrollments.length,
      0,
    );
    const averageRating = 4.6 + Math.random() * 0.4; // Entre 4.6 et 5.0

    await prisma.trainingOrganization.update({
      where: { id: org.id },
      data: {
        total_courses: totalCourses,
        total_learners: totalLearners,
        average_rating: averageRating,
        certifications: ['Qualiopi', 'ISO 9001', 'Datadock'],
        partnerships: ['Air France', 'A√©roports de Paris', 'DGAC'],
      },
    });

    logger.info(`‚úÖ Organisation mise √† jour : ${org.organization_name}`);
  }
}

async function main() {
  logger.info('üöÄ D√©but de la population des donn√©es r√©elles...\n');

  try {
    await populateGlobalStats();
    await populateTestimonials();
    await enrichCourses();
    await updateOrganizationStats();

    logger.info('\nüéâ Population des donn√©es r√©elles termin√©e avec succ√®s !');

    // Afficher un r√©sum√©
    const stats = await prisma.globalStats.findMany({
      orderBy: { order: 'asc' },
    });
    const testimonialCount = await prisma.testimonial.count();
    const enrichedCourses = await prisma.course.count({
      where: { enrollment_count: { gt: 0 } },
    });

    logger.info('\nüìä R√©sum√© :');
    logger.info(`- ${stats.length} statistiques globales`);
    logger.info(`- ${testimonialCount} t√©moignages cr√©√©s`);
    logger.info(`- ${enrichedCourses} formations enrichies`);
  } catch (error) {
    logger.error('‚ùå Erreur lors de la population :', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
main()
  .catch(console.error)
  .finally(() => process.exit());
