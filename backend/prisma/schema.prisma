// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id              String      @id @default(uuid()) @db.Uuid
  email           String      @unique
  first_name      String
  last_name       String
  role            UserRole
  organization    String?
  phone           String?
  kyc_status      VerificationStatus @default(pending)
  kyc_verified_at DateTime?   @db.Timestamptz
  affiliated_to   String[]    @db.Uuid
  mfa_enabled     Boolean     @default(false)
  mfa_secret      String?
  mfa_temp_secret String?     // Secret temporaire pour la configuration MFA
  mfa_temp_secret_expires DateTime?   @db.Timestamptz // Expiration du secret temporaire
  created_at      DateTime    @default(now()) @db.Timestamptz
  updated_at      DateTime    @default(now()) @db.Timestamptz
  // Relation back to Supabase auth users is implicit
  // We can add explicit relations if needed
}

model TrainingOrganization {
  id                    String      @id @default(uuid()) @db.Uuid
  user_id               String      @db.Uuid
  organization_name     String
  siret                 String?     @unique
  description           String?
  website               String?
  contact_email         String?
  contact_phone         String?
  contact_name          String?
  logo_url              String?
  verification_status   VerificationStatus @default(pending)
  verified_at           DateTime?   @db.Timestamptz
  qualiopi_certified    Boolean     @default(false)
  qualiopi_number       String?
  created_at            DateTime    @default(now()) @db.Timestamptz
  updated_at            DateTime    @default(now()) @db.Timestamptz
  courses               Course[]
  documents             TrainingOrgDocument[]
}

model TrainingOrgDocument {
  id              String      @id @default(uuid()) @db.Uuid
  org_id          String      @db.Uuid
  filename        String
  mime_type       String
  file_size       Int?        // Taille en bytes (null pour external)
  storage_type    StorageType @default(local)
  storage_path    String?     // Chemin Supabase (null pour external)
  external_url    String?     // URL YouTube/Vimeo (null pour local)
  thumbnail_url   String?     // Miniature (optionnel)
  title           String?     // Titre du média (optionnel)
  duration        Int?        // Durée en secondes (optionnel)
  created_at      DateTime    @default(now()) @db.Timestamptz
  updated_at      DateTime    @default(now()) @db.Timestamptz
  organization    TrainingOrganization @relation(fields: [org_id], references: [id], onDelete: Cascade)

  @@index([org_id])
}

model Company {
  id              String      @id @default(uuid()) @db.Uuid
  name            String
  siret           String?     @unique
  contact_email   String?
  contact_phone   String?
  manager_id      String?     @db.Uuid
  airport_id      String?     @db.Uuid
  created_at      DateTime    @default(now()) @db.Timestamptz
  enrollments     Enrollment[]
  affiliations    UserCompanyAffiliation[]
}

model Airport {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  iata_code   String?  @unique
  icao_code   String?  @unique
  city        String?
  country     String   @default("France")
  manager_id  String?  @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz
}

model Course {
  id                             String      @id @default(uuid()) @db.Uuid
  title                          String
  provider_id                    String      @db.Uuid
  description                    String?
  category                       AviationCategory
  objectives                     String?
  requirements                   String?
  target_audience                String?
  program                        String?
  qualiopi_indicators            String[]
  course_type                    CourseModality
  image_url                      String?
  status                         CourseStatus @default(draft)
  duration_hours                 Int?
  certification_type             String?
  certification_validity_months  Int?
  created_at                     DateTime    @default(now()) @db.Timestamptz
  updated_at                     DateTime    @default(now()) @db.Timestamptz
  provider                       TrainingOrganization @relation(fields: [provider_id], references: [id])
  sessions                       Session[]
  enrollments                    Enrollment[]
  certificates                   Certificate[]
  prerequisites                  CoursePrerequisite[] @relation("CoursePrerequisites")
  prerequisiteFor                CoursePrerequisite[] @relation("PrerequisiteFor")
}

model Session {
  id                       String      @id @default(uuid()) @db.Uuid
  course_id                String      @db.Uuid
  start_date               DateTime    @db.Timestamptz
  end_date                 DateTime    @db.Timestamptz
  location                 String?
  price                    Decimal     @db.Decimal(10, 2)
  available_seats          Int         @default(0)
  max_seats                Int         @default(0)
  lms_course_id            String?
  virtual_meeting_url      String?
  virtual_meeting_password String?
  session_type             SessionType @default(regular)
  created_at               DateTime    @default(now()) @db.Timestamptz
  updated_at               DateTime    @default(now()) @db.Timestamptz
  course                   Course      @relation(fields: [course_id], references: [id])
  enrollments              Enrollment[]
}

model Enrollment {
  id              String      @id @default(uuid()) @db.Uuid
  user_id         String      @db.Uuid
  course_id       String      @db.Uuid
  session_id      String      @db.Uuid
  status          EnrollmentStatus @default(pending)
  payment_status  PaymentStatus @default(pending)
  enrollment_date DateTime    @default(now()) @db.Timestamptz
  completion_date DateTime?   @db.Timestamptz
  score           Decimal?    @db.Decimal(5, 2)
  assigned_by     String?     @db.Uuid
  company_id      String?     @db.Uuid
  created_at      DateTime    @default(now()) @db.Timestamptz
  updated_at      DateTime    @default(now()) @db.Timestamptz
  course          Course      @relation(fields: [course_id], references: [id])
  session         Session     @relation(fields: [session_id], references: [id])
  company         Company?    @relation(fields: [company_id], references: [id])
  progress        EnrollmentProgress[]
  certificate     Certificate?
}

model EnrollmentProgress {
  id                 String      @id @default(uuid()) @db.Uuid
  enrollment_id      String      @db.Uuid
  module_id          String
  completed          Boolean     @default(false)
  completion_date    DateTime?   @db.Timestamptz
  time_spent_minutes Int         @default(0)
  score              Decimal?    @db.Decimal(5, 2)
  created_at         DateTime    @default(now()) @db.Timestamptz
  updated_at         DateTime    @default(now()) @db.Timestamptz
  enrollment         Enrollment  @relation(fields: [enrollment_id], references: [id])

  @@unique([enrollment_id, module_id])
}

model Certificate {
  id                String      @id @default(uuid()) @db.Uuid
  user_id           String      @db.Uuid
  course_id         String      @db.Uuid
  enrollment_id     String      @unique @db.Uuid
  certificate_number String     @unique
  course_name       String
  category          AviationCategory
  issue_date        DateTime    @db.Date
  expiry_date       DateTime?   @db.Date
  status            CertificateStatus @default(valid)
  token_id          String?     @unique
  blockchain_hash   String?
  pdf_url           String?
  created_at        DateTime    @default(now()) @db.Timestamptz
  updated_at        DateTime    @default(now()) @db.Timestamptz
  course            Course      @relation(fields: [course_id], references: [id])
  enrollment        Enrollment  @relation(fields: [enrollment_id], references: [id])
  alerts            ComplianceAlert[]
}

model ComplianceAlert {
  id              String      @id @default(uuid()) @db.Uuid
  user_id         String      @db.Uuid
  certificate_id  String      @db.Uuid
  alert_type      AlertType
  message         String
  severity        AlertSeverity @default(medium)
  status          AlertStatus @default(active)
  created_at      DateTime    @default(now()) @db.Timestamptz
  resolved_at     DateTime?   @db.Timestamptz
  certificate     Certificate @relation(fields: [certificate_id], references: [id])
}

model UserCompanyAffiliation {
  user_id    String   @db.Uuid
  company_id String   @db.Uuid
  role       String   @default("employee")
  created_at DateTime @default(now()) @db.Timestamptz
  company    Company  @relation(fields: [company_id], references: [id])

  @@id([user_id, company_id])
}

model CoursePrerequisite {
  course_id             String @db.Uuid
  prerequisite_course_id String @db.Uuid
  course                Course @relation("CoursePrerequisites", fields: [course_id], references: [id])
  prerequisite          Course @relation("PrerequisiteFor", fields: [prerequisite_course_id], references: [id])

  @@id([course_id, prerequisite_course_id])
}

enum UserRole {
  student
  training_org
  manager
  airport_manager
  admin
}

enum VerificationStatus {
  pending
  verified
  rejected
  expired
}

enum AviationCategory {
  safety
  security
  operations
  maintenance
  ground_handling
  cabin_crew
  pilot_training
}

enum CourseModality {
  in_person
  online
  virtual
  blended
}

enum CourseStatus {
  draft
  published
  archived
  suspended
}

enum SessionType {
  regular
  private
}

enum EnrollmentStatus {
  pending
  approved
  completed
  cancelled
  failed
}

enum PaymentStatus {
  pending
  paid
  refunded
  failed
}

enum CertificateStatus {
  valid
  expiring
  expired
  revoked
}

enum AlertType {
  expiring_soon
  expired
  renewal_required
  compliance_issue
}

enum AlertSeverity {
  low
  medium
  high
  critical
}

enum AlertStatus {
  active
  acknowledged
  resolved
  dismissed
}

enum StorageType {
  local
  youtube
  vimeo
}
